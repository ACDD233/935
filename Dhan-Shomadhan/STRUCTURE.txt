项目结构
========

Dhan-Shomadhan/
├── 核心模块
│   ├── config.py           - 配置管理和命令行参数解析
│   ├── split_dataset.py    - 数据集划分模块
│   ├── train.py           - 训练模块
│   ├── test.py            - 测试模块  
│   ├── visualize.py       - Grad-CAM可视化模块
│   ├── logger.py          - 实验日志记录模块
│   └── main.py            - 主控制脚本
│
├── 文档和配置
│   ├── README.md          - 详细使用说明
│   ├── PROJECT_SUMMARY.md - 项目重构总结
│   ├── requirements.txt   - Python依赖包
│   └── quick_start.sh     - 快速开始脚本
│
├── 原始文件
│   └── ci.py              - 原始的训练脚本（保留）
│
└── 数据和结果（运行时生成）
    ├── Dhan-Shomadhan/
    │   ├── Field Background/    - 类别1数据
    │   └── White Background/    - 类别2数据
    │
    └── Dhan-Shomadhan/{random_seed}/
        ├── datasets/
        │   ├── split_info.json
        │   └── fold_1/ ... fold_5/
        │       ├── train/
        │       └── val/
        ├── models/
        │   └── fold_*_best.pt
        ├── results/
        │   ├── training_summary.json
        │   └── test_results/
        ├── visualizations/
        │   └── fold_*/
        └── logs/
            ├── experiment_log.json
            └── experiments_summary.csv

核心功能
========

1. 数据集划分（split_dataset.py）
   - 可复现的K-Fold划分
   - 只读取指定的两个文件夹
   - 保存划分索引供验证

2. 模型训练（train.py）
   - 基于划分好的数据集训练
   - 支持所有YOLO参数
   - 自动保存模型和结果

3. 模型测试（test.py）
   - 加载训练好的模型评估
   - 生成测试报告
   - 对比训练和测试结果

4. Grad-CAM可视化（visualize.py）
   - 展示模型关注区域
   - 生成热力图
   - 保存可视化结果

5. 实验记录（logger.py）
   - 自动保存配置
   - 记录所有参数
   - 生成对比表格

快速开始
========

1. 安装依赖：
   pip install -r requirements.txt

2. 运行完整流程：
   python main.py --mode all --random_seed 42

3. 分步执行：
   python main.py --mode split --random_seed 42
   python main.py --mode train --random_seed 42
   python main.py --mode test --random_seed 42
   python main.py --mode visualize --random_seed 42

4. 查看帮助：
   python main.py --help

关键特性
========

✅ 可复现性：相同随机种子保证相同结果
✅ 模块化：功能独立，易于维护
✅ 完整记录：所有配置和结果自动保存
✅ 灵活配置：支持所有YOLO训练参数
✅ 专业级：Grad-CAM可视化，完整的实验管理
